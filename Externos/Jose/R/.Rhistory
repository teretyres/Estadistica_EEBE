mean(Datos$MPG, na.rm=TRUE)
pairs(Datos[3:9], upper.panel=NULL,pch=16,col='green')
model1 = lm(Horsepower~Displacement); model1
plot($Horsepower,Displacement)
plot(Displacement,Horsepower,pch=16,col='red',cex=1.5)
View(Datos)
head(Datos)
head(Datos$Horsepower)
plot(Datos$Horsepower,Datos$Displacement)
plot(Datos$Horsepower,Datos$Displacement,pch=16,col='red',cex=1.5)
model1 = lm(Horsepower~Displacement); model1
model1 = lm(Datos$Horsepower~Datos$Displacement); model1
Datos = read.table("C:/Users/joser/OneDrive/Desktop/ª/Uni/Q3/ES/R/Q1/coches.txt" #el \t es tab.
,header=TRUE,sep="\t",na.strings="NA",dec=".")
model1 = lm(Datos$Horsepower~Datos$Displacement); model1
summary(model1)
f1 <- function(x) {model1$coef[1] + model1$coef[2]*(x)}
model1$coef[1]
model1$coef[2]
model2=lm(log(MPG)~Weight); summary(model2)
rm(ls()=TRUE)
rm(list=ls())
rock
summary(rock)
IQR(rock$perm)
sd(rock$shape)
var(rock$area)
sd(rock$shape)
var(rock$area)
table(rock)
sort(table(rock))
sort(table(rock), decreasing=TRUE)
quantile(rock, 0.95) #Percentiles
quantile(rock$perm, 0.95) #Percentiles
IQR(rock$perm)
range(rock$perm)
var(rock$shape)
length(rock$shape)var(rock$shape) #Varianza
length(rock$shape) var(rock$shape) #Varianza
sd(rock$shape) #Desviación típica corregida
sqrt((N-1)/N)*sd(rock$shape)
N = length(rock$shape)
N = length(rock$shape)
var(rock$shape) #Varianza corregida
((N-1)/N)*var(rock$shape)
sd(rock$shape) #Desviación típica corregida
sqrt((N-1)/N)*sd(rock$shape)
Datos = read.table("C:/Users/joser/OneDrive/Desktop/ª/Uni/Q3/ES/R/Q1/coches.txt" #el \t es tab.
,header=TRUE,sep="\t",na.strings="NA",dec=".") #Depende de cómo estén en el .txt
mean(Datos$MPG, na.rm=TRUE)
boxplot(Datos) #Gráfico de caja guapo
boxplot(model1) #Gráfico de caja guapo
Datos = read.table("C:/Users/joser/OneDrive/Desktop/ª/Uni/Q3/ES/R/Q1/coches.txt" #el \t es tab.
,header=TRUE,sep="\t",na.strings="NA",dec=".") #Depende de cómo estén en el .txt
mean(Datos$MPG, na.rm=TRUE)
plot(Datos$Horsepower,Datos$Displacement)
plot(Datos$Horsepower,Datos$Displacement,pch=16,col='red',cex=1.5)
# col == color, pch == tipo de punto, cex == tamaño de pto, lwd == grosor líneas.
pairs(Datos[3:9], upper.panel=NULL,pch=16,col='green') #Diagramas de dispersión de todas las variables.
#--------------------------------------
#Modelo lineal de los mínimos cuadrados
#--------------------------------------
#lm(y~x) para encontrar y = mx + b
model1 = lm(Datos$Horsepower~Datos$Displacement); model1 #model1$coef[1] y model1$coef[2]
#--------------------------------------
#Añadir la recta de regresión
#--------------------------------------
plot(Displacement,Horsepower,pch=16,col='red',cex=1.5)
boxplot(model1) #Gráfico de caja guapo
boxplot(Datos) #Gráfico de caja guapo
boxplot(Datos$Horsepower) #Gráfico de caja guapo
rm(list=ls()) #Borrar objetos
x = 998
rm(list=ls())
(10+20+15+40+25)/5
(1+2+3+4+5)/5
(4*2+1*2)^2/(24+2+18+6)
3^3
(24+2+18+6)/(4+4+1+1)
d = c(1,2,4,5,8,10,11,14,16,20)
o = c(255,1500,2105,5050,1630,45320,58570,375800,1525640,2577000)
o = log(o)
plot(d,exp(o))
#plot(d,o) #Gráfica con log (una recta)
xmed = sum(d)/length(d) #xmed es la media de x (d)
ymed = sum(o)/length(o)
x = d - xmed # x,y son lo que hay dentro del paréntesis
y = o - ymed
Up = x*y #Lo del numerando
Down = x^2 #Lo del dividendo
m = sum(Up)/sum(Down) #La pendiente (m o Beta)
b = ymed - m*xmed #Coeficiente b (log(Alpha)) log == ln
Alpha = exp(b)
lm(o~d) #Nos da b, m
g = seq(0,20,1)
fg = Alpha*exp(m*g) #Curva en gráfica sin log
lines(g,fg)
#Cálculo de R^2 (coef de determinación) y R (coef de Pearson)
Abajo = y^2
fmed = sum(fg)/length(fg)
f = fg - fmed
Arriba = f^2
R2 = sum(Arriba)/sum(Abajo)
R = sqrt(R2)
abline() #Para añadir recta de regresión a un gráfico de dispersión
plot(d,o) #Gráfica con log (una recta)
plot(d,o) abline(d,o)#Gráfica con log (una recta)
plot(d,o); abline(d,o)#Gráfica con log (una recta)
plot(d,o); abline(o,d)#Gráfica con log (una recta)
plot(d,o) #Gráfica con log (una recta)
model1 = lm(o~d)#Gráfica con log (una recta)
abline(model1)#Gráfica con log (una recta)
model1
#plot(d,o) #Gráfica con log (una recta)
#model1 = lm(o~d) #Gráfica con log (una recta)
#abline(model1) #Gráfica con log (una recta)
xmed = sum(d)/length(d) #xmed es la media de x (d)
lm(o~d) #Nos da b, m
rm(list=ls())
#lm(y~x) para encontrar y = mx + b
model1 = lm(Datos$Horsepower~Datos$Displacement); model1 #model1$coef[1] y model1$coef[2]
Datos = read.table("C:/Users/joser/OneDrive/Desktop/ª/Uni/Q3/ES/R/Q1/coches.txt" #el \t es tab.
,header=TRUE,sep="\t",na.strings="NA",dec=".")
#lm(y~x) para encontrar y = mx + b
model1 = lm(Datos$Horsepower~Datos$Displacement); model1 #model1$coef[1] y model1$coef[2]
model1$coef[1]
model1$coef[2]
plot(Displacement,Horsepower,pch=16,col='red',cex=1.5)
plot(Datos$Displacement,Datos$Horsepower,pch=16,col='red',cex=1.5)
abline(model1,col='blue',lwd=5)
summary(model1)
cor(Datos$Horsepower,Datos$Displacement,use='na.or.complete') == R
cor(Datos$Horsepower,Datos$Displacement,use='na.or.complete')
sqrt(0.8342)
lm(Datos$Horsepower ~ Datos$Displacement)
model1$coef[1]
model1$coef[2]
f1 <- function(x) {model1$coef[1] + model1$coef[2]*(x)}
f1 = function(x) {model1$coef[1] + model1$coef[2]*(x)}
Displacement_predict = 151
Horsepower_predict = f1(Displacement_predict); Horsepower_predict
Horsepower_pred=predict(model1,data.frame(Displacement=Displacement_predict)); #Otra manera
Horsepower_pred=predict(model1,data.frame(Displacement=Displacement_predict))
Horsepower_pred
Horsepower_pred=predict(model1,data.frame(Displacement=Displacement_pred)); #Otra manera
Displacement_predict = 151
Horsepower_pred=predict(model1,data.frame(Displacement=Displacement_predict)); #Otra manera
Horsepower_pred
Displacement_predict = 151
Horsepower_predict = f1(Displacement_predict); Horsepower_predict
#lm(y~x) para encontrar y = mx + b
model1 = lm(Datos$Horsepower~Datos$Displacement); model1 #model1$coef[1] y model1$coef[2]
Displacement_predict = 151
Horsepower_pred=predict(model1,data.frame(Displacement=Displacement_predict)); #Otra manera
Horsepower_pred=predict(model1,data.frame(Data$Displacement=Displacement_predict)); #Otra manera
Horsepower_pred=predict(model1,data.frame(Displacement=Displacement_predict)); #Otra manera
Horsepower_pred
#Graficar el punto estimado
plot(Displacement,Horsepower,pch=16,col='red',cex=1.5)
Horsepower_pred=predict(model1,data.frame(Displacement=Displacement_predict)); #Otra manera, no sale
#Graficar el punto estimado
plot(Displacement,Horsepower,pch=16,col='red',cex=1.5)
#Graficar el punto estimado
plot(Displacement_predict,Horsepower,pch=16,col='red',cex=1.5)
#Graficar el punto estimado
plot(Displacement_predict,Horsepower,pch=16,col='red',cex=1.5)
#Graficar el punto estimado
plot(Displacement_predict,Data$Horsepower,pch=16,col='red',cex=1.5)
Horsepower_pred=predict(model1,data.frame(Datos$Displacement=Displacement_predict)); #Otra manera, no sale
#Graficar el punto estimado
plot(Displacement_predict,Datos$Horsepower,pch=16,col='red',cex=1.5)
#Graficar el punto estimado
plot(Displacement_predict,Horsepower,pch=16,col='red',cex=1.5)
#Graficar el punto estimado
plot(Displacement,Horsepower,pch=16,col='red',cex=1.5)
points(Displacement_predict,Horsepower_pred,col="black", pch=20,cex=4)
Datos = read.table("C:/Users/joser/OneDrive/Desktop/ª/Uni/Q3/ES/R/Q1/coches.txt" #el \t es tab.
,header=TRUE,sep="\t",na.strings="NA",dec=".") #Depende de cómo estén en el .txt
mean(Datos$MPG, na.rm=TRUE)
plot(Datos$Horsepower,Datos$Displacement)
plot(Datos$Horsepower,Datos$Displacement,pch=16,col='red',cex=1.5)
# col == color, pch == tipo de punto, cex == tamaño de pto, lwd == grosor líneas.
pairs(Datos[3:9], upper.panel=NULL,pch=16,col='green') #Diagramas de dispersión de TODAS las variables.
#--------------------------------------
#Modelo lineal de los mínimos cuadrados
#--------------------------------------
#lm(y~x) para encontrar y = mx + b
model1 = lm(Datos$Horsepower~Datos$Displacement); model1 #model1$coef[1] y model1$coef[2]
#--------------------------------------
#Añadir la recta de regresión
#--------------------------------------
plot(Datos$Displacement,Datos$Horsepower,pch=16,col='red',cex=1.5)
abline(model1,col='blue',lwd=5)
#------------------------------------------------
#Coef de determinación (R) y de correlación (R2)
#------------------------------------------------
summary(model1)
#Call:
#  lm(formula = Horsepower ~ Displacement)
#Residuals:
#  Min      1Q  Median      3Q     Max
#-49.543 -11.425  -0.704   9.604  57.255
#Coefficients:
#  Estimate Std. Error t value Pr(>|t|)
34.88703 -> b#(Intercept)  34.88703    3.96235   8.805 5.09e-14 ***
0.37062 -> m#  Displacement  0.37062    0.01677  22.094  < 2e-16 ***
#  ---
#  Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
#Residual standard error: 18.63 on 97 degrees of freedom
#(1 observation deleted due to missingness)
0.8342 -> R^2 #Multiple R-squared:  0.8342,	Adjusted R-squared:  0.8325
#Graficar el punto estimado
plot(Displacement,Horsepower,pch=16,col='red',cex=1.5)
par(mfrow=c(1,2))
plot(Weight,MPG,xlab="Weight", ylab="MPG",col="red",pch=20,cex=1.5)
plot(Weight,log(MPG),xlab="Weight", ylab="log(MPG)",col="red",pch=20,cex=1.5)
Datos = read.table("C:/Users/joser/OneDrive/Desktop/ª/Uni/Q3/ES/R/Q1/coches.txt" #el \t es tab.
,header=TRUE,sep="\t",na.strings="NA",dec=".") #Depe
par(mfrow=c(1,2))
plot(Weight,MPG,xlab="Weight", ylab="MPG",col="red",pch=20,cex=1.5)
plot(Datos$Weight,MPG,xlab="Weight", ylab="MPG",col="red",pch=20,cex=1.5)
plot(Datos$Weight,Datos$MPG,xlab="Weight", ylab="MPG",col="red",pch=20,cex=1.5)
plot(Datos$Weight,log(Datos$MPG),xlab="Weight", ylab="log(MPG)",col="red",pch=20,cex=1.5)
#Obtenemos: ln(MPG)=4.3-0.0004033*Weight o que MPG=exp(4.3)*exp(0.0004033*Weight)
model2=lm(log(MPG)~Weight); summary(model2)
#Obtenemos: ln(MPG)=4.3-0.0004033*Weight o que MPG=exp(4.3)*exp(0.0004033*Weight)
model2=lm(log(Datos$MPG)~Datos$Weight); summary(model2)
#Obtenemos: ln(MPG)=4.3-0.0004033*Weight o que MPG=exp(4.3)*exp(0.0004033*Weight)
model2=lm(Datos$MPG~Datos$Weight); summary(model2)
#Obtenemos: ln(MPG)=4.3-0.0004033*Weight o que MPG=exp(4.3)*exp(0.0004033*Weight)
model2=lm(log(Datos$MPG)~Datos$Weight); summary(model2)
#Predecir los valores para los que no hay MPG (NaN)
obs = which(MPG=="NaN"); obs
#Predecir los valores para los que no hay MPG (NaN)
obs = which(Datos$MPG=="NaN"); obs
Weight_pred = Datos$Weight[obs]
Log_MPG_pred = predict(model2,data.frame(Weight=Weight_pred)); Log_MPG_pred
MPG_pred = exp(Log_MPG_pred); MPG_pred
Weight_pred = Weight[obs]
d = c(3,4,5,6,7,8,9)
d[2]
a = c[1,3,4]
a = c(1,3,4)
d[a]
#Predecir los valores para los que no hay MPG (NaN)
obs = which(Datos$MPG=="NaN"); obs
Weight_pred = Datos$Weight[obs]
Log_MPG_pred = predict(model2,data.frame(Weight=Weight_pred)); Log_MPG_pred
Weight_pred = Datos$Weight[obs]; Weight_pred
Log_MPG_pred = predict(model2,data.frame(Weight=Weight_pred)); Log_MPG_pred
#Obtenemos: ln(MPG)=4.3-0.0004033*Weight o que MPG=exp(4.3)*exp(0.0004033*Weight)
model2=lm(log(Datos$MPG)~Datos$Weight); summary(model2)
#Predecir los valores para los que no hay MPG (NaN)
obs = which(Datos$MPG=="NaN"); obs
Weight_pred = Datos$Weight[obs]; Weight_pred
Log_MPG_pred = predict(model2,data.frame(Weight=Weight_pred)); Log_MPG_pred
#Resultado final
par(mfrow=c(1,2))
plot(Weight,log(MPG),xlab="Weight", ylab="log(MPG)",col="red",pch=20,cex=1.5)
plot(Datos$Weight,log(MPG),xlab="Weight", ylab="log(MPG)",col="red",pch=20,cex=1.5)
plot(Datos$Weight,log(Datos$MPG),xlab="Weight", ylab="log(MPG)",col="red",pch=20,cex=1.5)
points(Weight_pred,Log_MPG_pred, col = "black", pch= 20, cex = 2)
abline(model2,col="blue",lwd=3)
points(Weight_pred,Log_MPG_pred, col = "black", pch= 20, cex = 2)
obs = which(Datos$MPG=="NaN"); obs
Weight_pred = Datos$Weight[obs]; Weight_pred
Log_MPG_pred = predict(model2,data.frame(Weight=Weight_pred)); Log_MPG_pred
MPG_pred = exp(Log_MPG_pred); MPG_pred
#Resultado final
par(mfrow=c(1,2))
plot(Datos$Weight,log(Datos$MPG),xlab="Weight", ylab="log(MPG)",col="red",pch=20,cex=1.5)
abline(model2,col="blue",lwd=3)
points(Weight_pred,Log_MPG_pred, col = "black", pch= 20, cex = 2)
RM(LIST=LS())
rm(list=ls())
5+6+4+3+2+1
#------------------------------------------------------------------------
#  T4 - Variables aleatorias discretas y distribuciones de probabilidad
#------------------------------------------------------------------------
# Función de densidad (o probabilidad)
x1 = 1:6
f1 = rep(1/6,6)
plot(x1,f1,type='h',col='red',lwd=3,main='f1(x) ejemplo 1',
xlab='X1',ylab='f1(x)',xlim=c(0.5,6.5),ylim=c(0,0.2))
points(x1,f1,col='red',lwd=10)
plot(x2,f2,type='h',col='red',lwd=3,main='f1(x) ejemplo 2',
xlab='X2',ylab='f2(x)',xlim=c(0.5,6.5),ylim=c(0,0.2))
x2 = 1:6
f2 = x2/21
plot(x2,f2,type='h',col='red',lwd=3,main='f1(x) ejemplo 2',
xlab='X2',ylab='f2(x)',xlim=c(0.5,6.5),ylim=c(0,0.2))
points(x2,f2,col='red',lwd=10)
plot(x2,f2,type='h',col='red',lwd=3,main='f1(x) ejemplo 2',
xlab='X2',ylab='f2(x)',xlim=c(0.5,6.5),ylim=c(0,0.35))
points(x2,f2,col='red',lwd=10)
lines(4,f2[4],col='blue')
points(4,f2[4],col='blue')
points(4,f2[4],col='blue',lwd=10)
lines(4,f2[4],col='blue',lwd=3)
lines(4,f2[4],type='h',col='blue',lwd=3)
lines(4,f2[4],type='h',col='blue')
lines(4,f2[4],type='h',col='blue',lwd=3)
c(0,x1,7)
#--- Función de distribución (o probabilidad) ---
F1 = cumsum(f1)
ploy(c(0,x1,7),c(0,F1,1),type='s',col='red',lwd=3)
plot(c(0,x1,7),c(0,F1,1),type='s',col='red',lwd=3)
points(x1,F1,col='red',lwd=8)
#Dado trucado
F2 = cumsum(f2)
plot(c(0,x2,7),c(0,F2,1),type='s',col='red',lwd=3)
points(x2,F2,col='red',lwd=8)
lines(c(4,5), rep(F2[4],2), type="s", col="blue", lwd=3)
points(4, F2[4], col="blue", lwd=8)
E=sum(x1*f1)
E=sum(x1*f1) #μ=1*(1/6)+2*(1/6)+3*(1/6)+4*(1/6)+5*(1/6)+6*(1/6)
E=sum(x1*f1) #μ=1*(1/6)+2*(1/6)+3*(1/6)+4*(1/6)+5*(1/6)+6*(1/6)=3.5
V=sum((x1-E)^2*f1) #σ^2=(1-3.5)^2*1/6+...=2.916...
sample(x1)
x1
sample(x1,size=1,prob=)
sample(x1,size=1,prob=)
sample(x1,size=1,prob=)
sample(x1,size=1,prob=)
sample(x1,100,replace=T,prob=)
sample(x1,100,replace=T,prob=)
h = hist(sampleo)
sampleo = sample(x1,100,replace=T,prob=)
h = hist(sampleo)
h = hist(sampleo,breaks=seq(0.5,6.5,1))
h = hist(sampleo,breaks=seq(0.5,6.5,1),freq=FALSE)
h = hist(sampleo,breaks=seq(0.5,6.5,1))
h = hist(sampleo,breaks=seq(0.5,6.5,1),freq=FALSE)
h = hist(sampleo,breaks=seq(0.5,6.5,1))
h = hist(sampleo,breaks=seq(0.5,6.5,1),freq=FALSE)
sampleo = sample(x1,100,replace=T,prob=)
sampleo = sample(x2,100,replace=T,prob=)
h1 = hist(sampleo,breaks=seq(0.5,6.5,1),freq=FALSE)
sampleo1 = sample(x1,100,replace=T,prob=)
sampleo2 = sample(x2,100,replace=T,prob=)
h1 = hist(sampleo1,breaks=seq(0.5,6.5,1),freq=FALSE)
h2 = hist(sampleo2,breaks=seq(0.5,6.5,1),freq=FALSE)
sampleo2 = sample(x2,100,replace=T,prob=)
h2 = hist(sampleo2,breaks=seq(0.5,6.5,1),freq=FALSE)
sampleo1 = sample(x1,100,replace=T,prob=f1)
sampleo2 = sample(x2,100,replace=T,prob=f2)
h1 = hist(sampleo1,breaks=seq(0.5,6.5,1),freq=FALSE)
h2 = hist(sampleo2,breaks=seq(0.5,6.5,1),freq=FALSE)
sampleo1 = sample(x1,100,replace=T,prob=f1)
h1 = hist(sampleo1,breaks=seq(0.5,6.5,1),freq=FALSE)
h2 = hist(sampleo2,breaks=seq(0.5,6.5,1),freq=FALSE)
sampleo2 = sample(x2,100,replace=T,prob=f2)
h2 = hist(sampleo2,breaks=seq(0.5,6.5,1),freq=FALSE)
sampleo2 = sample(x2,100,replace=T,prob=f2)
h2 = hist(sampleo2,breaks=seq(0.5,6.5,1),freq=FALSE)
sampleo2 = sample(x2,100,replace=T,prob=f2)
h2 = hist(sampleo2,breaks=seq(0.5,6.5,1),freq=FALSE)
h1 = hist(sampleo1,breaks=seq(0.5,6.5,1),freq=FALSE)
hist(sampleo1,breaks=seq(0.5,6.5,by=1), freq=FALSE, add=T)
plot(x1,f1,type='h',col='red',lwd=3,main='f1(x) ejemplo 1',
xlab='X1',ylab='f1(x)',xlim=c(0.5,6.5),ylim=c(0,0.2))
plot(x1,f1,type='h',col='red',lwd=3,main='f1(x) ejemplo 1',
xlab='X1',ylab='f1(x)',xlim=c(0.5,6.5),ylim=c(0,0.2))
points(x1,f1,col='red',lwd=10)
plot(x1,f1,type='h',col='red',lwd=3,main='f1(x) ejemplo 1',
xlab='X1',ylab='f1(x)',xlim=c(0.5,6.5),ylim=c(0,0.2))
points(x1,f1,col='red',lwd=10); gra.fx.ej1 = recordPlot()
gra.fx.ej1hist(sampleo1,breaks=seq(0.5,6.5,by=1), freq=FALSE, add=T)
gra.fx.ej1
hist(sampleo1,breaks=seq(0.5,6.5,by=1), freq=FALSE, add=T)
sampleo1 = sample(x1,100,replace=T,prob=f1)
sampleo2 = sample(x2,100,replace=T,prob=f2)
h1 = hist(sampleo1,breaks=seq(0.5,6.5,1),freq=FALSE)
sampleo1 = sample(x1,100,replace=T,prob=f1)
h1 = hist(sampleo1,breaks=seq(0.5,6.5,1),freq=FALSE)
sampleo1 = sample(x1,100,replace=T,prob=f1)
h1 = hist(sampleo1,breaks=seq(0.5,6.5,1),freq=FALSE)
h1 = hist(sampleo1,breaks=seq(0.5,6.5,1),freq=FALSE)
sampleo1 = sample(x1,100,replace=T,prob=f1)
h1 = hist(sampleo1,breaks=seq(0.5,6.5,1),freq=FALSE)
sampleo1 = sample(x1,100,replace=T,prob=f1); h1
sampleo1 = sample(x1,100,replace=T,prob=f1);
h1 = hist(sampleo1,breaks=seq(0.5,6.5,1),freq=FALSE)
hist(sampleo1,breaks=seq(0.5,6.5,by=1), freq=FALSE, add=T)
gra.fx.ej1
hist(sampleo1,breaks=seq(0.5,6.5,by=1), freq=FALSE, add=T)
sampleo1 = sample(x1,100,replace=T,prob=f1);
h1 = hist(sampleo1,breaks=seq(0.5,6.5,1),freq=FALSE)
hist(sampleo1,breaks=seq(0.5,6.5,by=1), freq=FALSE, add=T)
gra.fx.ej1
hist(sampleo1,breaks=seq(0.5,6.5,by=1), freq=FALSE, add=T)
lines(x1,f1,type="h", col='red',lwd=3)
points(x1,f1,col='red',lwd=10)
x2 = 1:6
f2 = x2/21
plot(x2,f2,type='h',col='red',lwd=3,main='f1(x) ejemplo 2',
xlab='X2',ylab='f2(x)',xlim=c(0.5,6.5),ylim=c(0,0.35))
points(x2,f2,col='red',lwd=10); gra.fx.ej2 = recordPlot()
gra.fx.ej2
hist(sampleo2,breaks=seq(0.5,6.5,by=1), freq=FALSE, add=T)
model1$coef[1]
#lm(y~x) para encontrar y = mx + b
model1 = lm(Datos$Horsepower~Datos$Displacement); model1 #model1$coef[1] y model1$coef[2]
model1$coef[1]
Datos = read.table("C:/Users/joser/OneDrive/Desktop/ª/Uni/Q3/ES/R/Q1/coches.txt" #el \t es tab.
,header=TRUE,sep="\t",na.strings="NA",dec=".") #Depende de cómo estén en el .txt
model1 = lm(Datos$Horsepower~Datos$Displacement); model1
model1$coef[1]
coef(model1)[1]
gra.fx.ej2
hist(sampleo2,breaks=seq(0.5,6.5,by=1), freq=FALSE, add=T)
80*0,65
80*0.65
12.5/25
4/25
5/25
0.5*25
12.5*(1-0.5)
sqrt(6.25)
3*0.515^3*(1-0.515)^7/10
10*0.515^3*(1-0.515)^7/3
0.515^3*(1-0.515)^7
5/9
rm(list=ls())
dbinom(4,size=10)
dbinom(4,size=10,prob=1/3)
dbinom(4,size=10,prob=0.333)
dbinom(4,size=10,prob=0.3333)
local({ .Table <- data.frame(Probability=dbinom(0:10, size=10,
prob=0.3333))
rownames(.Table) <- 0:10 print(.Table) })
local({ .Table <- data.frame(Probability=dbinom(0:10, size=10, prob=0.3333))
rownames(.Table) <- 0:10 print(.Table) })
dbinom(4,size=10,prob=1/3)
dbinom(4,size=10,prob=1/3)
dgeom(4,size=10,prob=1/3)
dgeom(4,prob=1/3)
dnbinom(4,prob=1/3)
dnbinom(4,size=10,prob=1/3)
dhyper(4,size=10,prob=1/3)
pbinom(4,size=10,prob=1/3)
pbinom(4,size=10,prob=1/3)
pbinom(4,size=10,prob=1/3)
pbinom(4,size=10,prob=1/3,lower.tail=TRUE)
pbinom(4,size=10,prob=1/3,lower.tail=TRUE)
pbinom(c(4),size=10,prob=1/3,lower.tail=TRUE)
pbinom(c(4),size=10,prob=1/3,lower.tail=TRUE)
x = 0:8 #Posibles resultados
f = dbinom(x,size=10,prob=1/3)
plot(x,f,type="h", col='red', lwd=3, main="B(10,0.33)", xlab="X",
ylab="f(x)", xlim=c(-0.8,8.2), ylim=c(0,0.30))
points(x, f, col='red', lwd=10); gra.fx.binom = recordPlot()
x4 = 4; f_4 = dbinom(4, size=10, prob=0.3333) #Cálculo de P(X=4)=f(4)
lines(x4, f_4, type="h", col="blue", lwd=3) #Agrega la línea en X=4
points(x4, f_4, col="blue", lwd=10) #Agrega el punto en (4,f(4))
text(x4, f_4,expression(P(X==4)), pos=3, col="blue")
#Función de distribución
x = 4; f_4 = pbinom(4, size=10, prob=0.3333)
abline(v=x, col="blue") abline(h=f_4, col="blue")
#Función de distribución
x = 4; f_4 = pbinom(4, size=10, prob=0.3333)
abline(v=x, col="blue"); abline(h=f_4, col="blue")
text(x, f_4,expression(P(X<=4)== P(X<5)), pos=2, col="blue")
#Función de probabilidad
x = 0:8 #Posibles resultados
fd = dbinom(x,size=10,prob=1/3)
plot(x,fd,type="h", col='red', lwd=3, main="B(10,0.33)", xlab="X",
ylab="f(x)", xlim=c(-0.8,8.2), ylim=c(0,0.30))
points(x, fd, col='red', lwd=10)
#Función de distribución
x = 0:8 #Posibles resultados
fp = pbinom(x,size=10,prob=1/3)
plot(x,fp,type="h", col='red', lwd=3, main="B(10,0.33)", xlab="X",
ylab="f(x)", xlim=c(-0.8,8.2), ylim=c(0,0.30))
points(x, fp, col='red', lwd=10)
x = 0:8 #Posibles resultados
fp = pbinom(x,size=10,prob=1/3)
plot(x,fp,type="h", col='red', lwd=3, main="B(10,0.33)", xlab="X",
ylab="f(x)", xlim=c(-0.8,8.2), ylim=c(0,1))
points(x, fp, col='red', lwd=10)
plot(x,c(0,fp,1),type="h", col='red', lwd=3, main="B(10,0.33)", xlab="X",
ylab="f(x)", xlim=c(-0.8,8.2), ylim=c(0,1))
plot(c(0,x,8),c(0,fp,1),type="h", col='red', lwd=3, main="B(10,0.33)", xlab="X",
ylab="f(x)", xlim=c(-0.8,8.2), ylim=c(0,1))
plot(c(0,x,8),c(0,fp,1),type="h", col='red', lwd=3, main="B(10,0.33)", xlab="X",
ylab="f(x)", xlim=c(-0.8,8.2), ylim=c(0,1))
plot(c(0,x,8),c(0,fp,1),type="s", col='red', lwd=3, main="B(10,0.33)", xlab="X",
ylab="f(x)", xlim=c(-0.8,8.2), ylim=c(0,1))
plot(x,fp,type="s", col='red', lwd=3, main="B(10,0.33)", xlab="X",
ylab="f(x)", xlim=c(-0.8,8.2), ylim=c(0,1))
plot(x,fp, col='red', lwd=3, main="B(10,0.33)", xlab="X",
ylab="f(x)", xlim=c(-0.8,8.2), ylim=c(0,1))
plot(x,fp, type="s", col='red', lwd=3, main="B(10,0.33)", xlab="X",
ylab="f(x)", xlim=c(-0.8,8.2), ylim=c(0,1))
points(x, fp, col='red', lwd=10)
qbinom(c(0.15), size=10, prob=0.3333, lower.tail=FALSE)
qbinom(c(0.15), size=10, prob=1/3, lower.tail=FALSE)
qbinom(c(0.15), size=10, prob=1/3,)
qbinom(c(0.15), size=10, prob=1/3, lower.tail=)
qbinom(c(0.15), size=10, prob=1/3, lower.tail=F)
d #Función de distribución
qbinom(c(0.15), size=10, prob=1/3, lower.tail=a)
rbinom(4,size=10,prob=1/3)
rbinom(4,size=10,prob=1/3)
#Exercici 1
med=87.2
desv=5.7
#1
muestra = 16
EX=muestra*media
EX=muestra*med
